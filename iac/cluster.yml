Description: DevOps Demo Kubernetes Cluster
Parameters:
  EnvironmentName:
    Description: Name of the environment
    Type: String
Resources:
  EKSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EnvironmentName}-eks-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Kubernetes traffic
      GroupName: KubernetesSec
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-vpc"
  SecurityGroupIngressHttp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow HTTP
      GroupId: !Ref SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
    DependsOn: SecurityGroup
  SecurityGroupIngressHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow HTTPS
      GroupId: !Ref SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
    DependsOn: SecurityGroup
  SecurityGroupIngressKubelet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow Kubelet
      GroupId: !Ref SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250
    DependsOn: SecurityGroup
  SecurityGroupIngressDns:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow DNS
      GroupId: !Ref SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 53
      ToPort: 53
    DependsOn: SecurityGroup
  SecurityGroupEgressHttp:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow HTTP
      GroupId: !Ref SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
    DependsOn: SecurityGroup
  SecurityGroupEgressHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow HTTPS
      GroupId: !Ref SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
    DependsOn: SecurityGroup
  SecurityGroupEgressKubelet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow Kubelet
      GroupId: !Ref SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250
    DependsOn: SecurityGroup
  SecurityGroupEgressDns:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow DNS
      GroupId: !Ref SecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 53
      ToPort: 53
    DependsOn: SecurityGroup
  Cluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub "${EnvironmentName}-eks-cluster"
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - Fn::ImportValue:
              !Sub "${EnvironmentName}-private-subnet-1"
          - Fn::ImportValue:
              !Sub "${EnvironmentName}-private-subnet-2"
      RoleArn: !GetAtt EKSRole.Arn
      Tags:
        - Key: Project
          Value: !Sub "${EnvironmentName}"
    DependsOn:
      - EKSRole
      - SecurityGroup
Outputs:
  ClusterSecurityGroup:
    Description: A reference to security group of the cluster
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-cluster-sg
