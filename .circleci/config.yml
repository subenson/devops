version: 2.1

commands:
  get-container-registry:
    description: Retrieve REGISTRY_ID and REPOSITORY_NAME from AWS ECR.
    steps:
      - run:
          name: Get registry ID
          command: |
            export REGISTRY_ID=$(aws ecr describe-repositories --query "repositories[0].registryId" --output text)
            echo 'export REGISTRY_ID="${REGISTRY_ID}"' >> "$BASH_ENV"
            source "$BASH_ENV"
            echo "${REGISTRY_ID}"
      - run:
          name: Get repository name
          command: |
            export REGISTRY_NAME=$(aws ecr describe-repositories --query "repositories[0].repositoryName" --output text)
            echo 'export REGISTRY_NAME="${REGISTRY_NAME}"' >> "$BASH_ENV"
            source "$BASH_ENV"
            echo "${REGISTRY_ID}"
      - run:
          name: Get registry URL
          command: |
            export REGISTRY_URL=${REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
            echo 'export REGISTRY_URL="${REGISTRY_URL}"' >> "$BASH_ENV"
            source "$BASH_ENV"
            echo "${REGISTRY_ID}"

jobs:
  upsert-container-registry:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Setup container registry
          command: |
            aws cloudformation deploy \
              --template-file iac/container-registry.yml \
              --stack-name DevOpsDemoContainerRegistry \
              --parameter-overrides EnvironmentName="devops-demo"
  validate-backend:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-dependencies-{{ checksum "apps/flask/requirements.txt" }}
            - backend-dependencies-
      - run:
          name: Install dependencies
          command: |
            cd apps/flask
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: backend-dependencies-{{ checksum "apps/flask/requirements.txt" }}
      - run:
          name: Lint
          command: |
            cd apps/flask
            . venv/bin/activate
            pylint app.py
      - run:
          name: Unit Test
          command: |
            cd apps/flask
            . venv/bin/activate
            pytest test.py
      - run:
          name: Verify Dockerfile
          command: |
            cd apps/flask
            wget -O ./hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x ./hadolint
            ./hadolint Dockerfile
  containerize-backend:
    docker:
      - image: docker:20.10.18-git
    steps:
      - checkout
      - get-container-registry
      - run:
          name: Install dependencies
          command: |
            apk add --update python3 py3-pip
            pip install --upgrade pip
            pip install awscli
      - setup_remote_docker
      - run:
          name: Containerize backend
          command: |
            cd apps/flask
            docker build -t devops-demo-backend .
      - run:
          name: Docker Login
          command: |
            echo "${AWS_REGION}"
            export ECR_PASSWORD=$(aws ecr get-login-password --region ${AWS_REGION})
            echo "${REGISTRY_URL}"
            docker login -u AWS -p ${ECR_PASSWORD} ${REGISTRY_URL}
      - run:
          name: Tag container
          command: |
            docker tag devops-demo-backend ${REGISTRY_URL}/${REGISTRY_NAME}:backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Push container
          command: |
            docker push ${REGISTRY_URL}/${REGISTRY_NAME}:backend-${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - upsert-container-registry
      - validate-backend
      - containerize-backend:
          requires: [validate-backend, upsert-container-registry]
