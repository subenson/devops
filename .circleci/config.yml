version: 2.1

commands:
  get-container-registry:
    description: Retrieve REGISTRY_ID and REPOSITORY_NAME from AWS ECR.
    steps:
      - run:
          name: Get registry ID
          command: |
            export REGISTRY_ID=$(aws ecr describe-repositories --query "repositories[0].registryId" --output text)
            echo 'export REGISTRY_ID='${REGISTRY_ID} >> "$BASH_ENV"
            echo "${REGISTRY_ID}"
      - run:
          name: Get repository name
          command: |
            export REGISTRY_NAME=$(aws ecr describe-repositories --query "repositories[0].repositoryName" --output text)
            echo 'export REGISTRY_NAME='${REGISTRY_NAME} >> "$BASH_ENV"
            echo "${REGISTRY_NAME}"
      - run:
          name: Get registry URL
          command: |
            export REGISTRY_ID=$(aws ecr describe-repositories --query "repositories[0].registryId" --output text)
            export REGISTRY_URL=${REGISTRY_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            echo 'export REGISTRY_URL='${REGISTRY_URL} >> "$BASH_ENV"
            echo "${REGISTRY_URL}"
      - run:
          name: Docker Login
          command: |
            export ECR_PASSWORD=$(aws ecr get-login-password)
            source $BASH_ENV
            docker login -u AWS -p ${ECR_PASSWORD} ${REGISTRY_URL}

jobs:
  upsert-security:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Setup security
          command: |
            aws cloudformation deploy \
              --template-file iac/security.yml \
              --stack-name DevOpsDemoSecurity \
              --parameter-overrides EnvironmentName="devops-demo"
  upsert-container-registry:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Setup container registry
          command: |
            aws cloudformation deploy \
              --template-file iac/container-registry.yml \
              --stack-name DevOpsDemoContainerRegistry \
              --parameter-overrides EnvironmentName="devops-demo"
  test-backend:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-dependencies-{{ checksum "apps/flask/requirements.txt" }}
            - backend-dependencies-
      - run:
          name: Install dependencies
          command: |
            cd apps/flask
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: backend-dependencies-{{ checksum "apps/flask/requirements.txt" }}
      - run:
          name: Unit Test
          command: |
            cd apps/flask
            . venv/bin/activate
            pytest test.py
  lint-backend:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-dependencies-{{ checksum "apps/flask/requirements.txt" }}
            - backend-dependencies-
      - run:
          name: Install dependencies
          command: |
            cd apps/flask
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: backend-dependencies-{{ checksum "apps/flask/requirements.txt" }}
      - run:
          name: Lint
          command: |
            cd apps/flask
            . venv/bin/activate
            pylint app.py
  lint-docker:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - run:
          name: Lint Dockerfile
          command: |
            cd apps/flask
            wget -O ./hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x ./hadolint
            ./hadolint Dockerfile
  bump-backend-container-version:
    docker:
      - image: docker:20.10.18-git
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update python3 py3-pip
            pip install --upgrade pip
            pip install awscli
      - setup_remote_docker
      - get-container-registry
      - run:
          name: Get backend version
          command: |
            export BACKEND_VERSION=$(cat apps/flask/version)
            echo 'export BACKEND_VERSION='${BACKEND_VERSION} >> "$BASH_ENV"
            echo "${BACKEND_VERSION}"
      - run:
          name: Get latest container version
          command: |
            source $BASH_ENV
            export BACKEND_CONTAINER_EXISTS=$(aws ecr list-images \
              --repository-name=${REGISTRY_NAME} \
              --query="imageIds[?imageTag=='backend.v${BACKEND_VERSION}'].imageTag" \
              --output text)
            echo 'export BACKEND_CONTAINER_EXISTS='${BACKEND_CONTAINER_EXISTS} >> "$BASH_ENV"
      - run:
          name: Containerize backend
          command: |
            cd apps/flask
            docker build -t devops-demo-backend .
      - run:
          name: Tag container
          command: |
            source $BASH_ENV
            docker tag devops-demo-backend ${REGISTRY_URL}/${REGISTRY_NAME}:backend.v${BACKEND_VERSION}
      - run:
          name: Push container
          command: |
            source $BASH_ENV
            docker push ${REGISTRY_URL}/${REGISTRY_NAME}:backend.v${BACKEND_VERSION}
  upsert-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar
            yum install -y gzip
      - run:
          name: Install EKSCTL
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v0.116.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl ~/
      - run:
          name: Create Cluster
          command: |
            if ! ~/eksctl get cluster | grep -q devops-demo
            then
              ~/eksctl create cluster \
                --name=devops-demo \
                --nodes=2 \
                --node-type=t3.micro \
                --region=${AWS_DEFAULT_REGION} \
                --instance-prefix=devops-demo-
            fi
  deploy-backend:
    docker:
      - image: docker:20.10.18-git
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache tar
            apk add --no-cache gzip
            apk add --no-cache curl
            apk add --update python3 py3-pip
            pip install --upgrade pip
            pip install awscli
      - setup_remote_docker
      - get-container-registry
      - run:
          name: Install Kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl
            chmod +x kubectl
            mv kubectl ~/
      - run:
          name: Configure Kubectl
          command: |
            aws eks update-kubeconfig --name devops-demo
      - run:
          name: Deploy application
          command: |
            source $BASH_ENV
            ~/kubectl create deploy devops-demo-backend --image=${REGISTRY_URL}/${REGISTRY_NAME}:backend.v${BACKEND_VERSION}

workflows:
  default:
    jobs:
      - upsert-security
      - upsert-cluster
      - upsert-container-registry
      - test-backend
      - lint-backend
      - lint-docker
      - bump-backend-container-version:
          requires: [upsert-container-registry, test-backend, lint-backend, lint-docker]
      - deploy-backend:
          requires: [upsert-cluster, bump-backend-container-version]
