version: 2.1

commands:
  get-container-registry:
    description: Retrieve REGISTRY_ID and REPOSITORY_NAME from AWS ECR.
    steps:
      - run:
          name: Get registry ID
          command: |
            export REGISTRY_ID=$(aws ecr describe-repositories --query "repositories[0].registryId" --output text)
            echo 'export REGISTRY_ID='${REGISTRY_ID} >> "$BASH_ENV"
            echo "${REGISTRY_ID}"
      - run:
          name: Get repository name
          command: |
            export REGISTRY_NAME=$(aws ecr describe-repositories --query "repositories[0].repositoryName" --output text)
            echo 'export REGISTRY_NAME='${REGISTRY_NAME} >> "$BASH_ENV"
            echo "${REGISTRY_NAME}"
      - run:
          name: Get registry URL
          command: |
            export REGISTRY_ID=$(aws ecr describe-repositories --query "repositories[0].registryId" --output text)
            export REGISTRY_URL=${REGISTRY_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            echo 'export REGISTRY_URL='${REGISTRY_URL} >> "$BASH_ENV"
            echo "${REGISTRY_URL}"
      - run:
          name: Docker Login
          command: |
            export ECR_PASSWORD=$(aws ecr get-login-password)
            source $BASH_ENV
            docker login -u AWS -p ${ECR_PASSWORD} ${REGISTRY_URL}

jobs:
  upsert-security:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Setup security
          command: |
            aws cloudformation deploy \
              --template-file iac/security.yml \
              --stack-name DevOpsDemoSecurity \
              --parameter-overrides EnvironmentName="devops-demo"
  upsert-network:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Setup network
          command: |
            aws cloudformation deploy \
              --template-file iac/network.yml \
              --stack-name DevOpsDemoNetwork \
              --parameter-overrides EnvironmentName="devops-demo"
  upsert-container-registry:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Setup container registry
          command: |
            aws cloudformation deploy \
              --template-file iac/container-registry.yml \
              --stack-name DevOpsDemoContainerRegistry \
              --parameter-overrides EnvironmentName="devops-demo"
  test-backend:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-dependencies-{{ checksum "apps/flask/requirements.txt" }}
            - backend-dependencies-
      - run:
          name: Install dependencies
          command: |
            cd apps/flask
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: backend-dependencies-{{ checksum "apps/flask/requirements.txt" }}
      - run:
          name: Unit Test
          command: |
            cd apps/flask
            . venv/bin/activate
            pytest test.py
  lint-backend:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-dependencies-{{ checksum "apps/flask/requirements.txt" }}
            - backend-dependencies-
      - run:
          name: Install dependencies
          command: |
            cd apps/flask
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: backend-dependencies-{{ checksum "apps/flask/requirements.txt" }}
      - run:
          name: Lint
          command: |
            cd apps/flask
            . venv/bin/activate
            pylint app.py
  lint-docker:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - run:
          name: Lint Dockerfile
          command: |
            cd apps/flask
            wget -O ./hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x ./hadolint
            ./hadolint Dockerfile
  bump-backend-container-version:
    docker:
      - image: docker:20.10.18-git
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update python3 py3-pip
            pip install --upgrade pip
            pip install awscli
      - setup_remote_docker
      - get-container-registry
      - run:
          name: Get backend version
          command: |
            cd apps/flask
            export BACKEND_VERSION=$(cat version)
            echo 'export BACKEND_VERSION='${BACKEND_VERSION} >> "$BASH_ENV"
            echo "${BACKEND_VERSION}"
      - run:
          name: Get latest container version
          command: |
            source $BASH_ENV
            export VERSION_EXISTS=$(aws ecr list-images \
              --repository-name=devops-demo-repository \
              --query="imageIds[?imageTag=='backend:${BACKEND_VERSION}'].imageTag" \
              --output text)
            if [ ! -z "$VERSION_EXISTS" ]
            then
              circleci-agent step halt
            fi
      - run:
          name: Containerize backend
          when:
          command: |
            docker build -t devops-demo-backend .
      - run:
          name: Tag container
          command: |
            source $BASH_ENV
            docker tag devops-demo-backend ${REGISTRY_URL}/${REGISTRY_NAME}:backend:${BACKEND_VERSION}
      - run:
          name: Push container
          command: |
            source $BASH_ENV
            docker push ${REGISTRY_URL}/${REGISTRY_NAME}:backend:${BACKEND_VERSION}
  upsert-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Upsert cluster
          command: |
            aws cloudformation deploy \
              --template-file iac/cluster.yml \
              --stack-name DevOpsDemoCluster \
              --parameter-overrides EnvironmentName="devops-demo" \
              --capabilities "CAPABILITY_NAMED_IAM"
  upsert-nodes:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Configure Nodes
          command: |
            aws cloudformation deploy \
              --template-file iac/nodes.yml \
              --stack-name DevOpsDemoNodes \
              --parameter-overrides EnvironmentName="devops-demo" \
              --capabilities "CAPABILITY_NAMED_IAM"
  deploy-application:
    docker:
      - image: docker:20.10.18-git
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache tar
            apk add --no-cache gzip
            apk add --no-cache curl
            apk add gettext libintl
            apk add --update python3 py3-pip
            pip install --upgrade pip
            pip install awscli
      - setup_remote_docker
      - get-container-registry
      - run:
          name: Get cluster name
          command: |
            export CLUSTER_NAME=$(aws eks list-clusters --query "clusters[0]" --output text)
            echo 'export CLUSTER_NAME='${CLUSTER_NAME} >> "$BASH_ENV"
            echo "${CLUSTER_NAME}"
      - run:
          name: Install Kubectl
          command: |
            mkdir ~/workspace
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl
            chmod +x kubectl
            mv kubectl ~/workspace
      - run:
          name: Configure Kubectl
          command: |
            source $BASH_ENV
            aws eks update-kubeconfig --name $CLUSTER_NAME
      - get-container-registry
      - run:
          name: Upsert namespace
          command: |
            if ! ~/workspace/kubectl get namespace | grep -q devops-demo
            then
              ~/workspace/kubectl create namespace devops-demo
            fi
      - run:
          name: Update deploy manifest image
          command: |
            source $BASH_ENV
            export IMAGE_NAME=backend:${BACKEND_VERSION}
            echo $REGISTRY_URL
            echo $REGISTRY_NAME
            echo $IMAGE_NAME
            envsubst < apps/flask/deploy.template > apps/flask/deploy.yml
      - run:
          name: Create registry secret
          command: |
            source $BASH_ENV
            if ! ~/workspace/kubectl get secret | grep -q devops-demo-registry-credentials
            then
              export ECR_PASSWORD=$(aws ecr get-login-password)
              ~/workspace/kubectl create secret docker-registry devops-demo-registry-credentials \
                --docker-server=${REGISTRY_URL}:backend:${BACKEND_VERSION} \
                --docker-username=AWS \
                --docker-password=$ECR_PASSWORD
            fi
      - run:
          name: Deploy
          command: |
            ~/workspace/kubectl apply -f apps/flask/deploy.yml
      - run:
          name: Expose Cluster IP
          command: |
            if ! ~/workspace/kubectl get service --namespace=devops-demo | grep -q flask-cluster-ip
            then
              ~/workspace/kubectl expose deployment flask \
                --type=ClusterIP \
                --name=flask-cluster-ip \
                --namespace=devops-demo
            fi
      - run:
          name: Expose NodePort
          command: |
            if ! ~/workspace/kubectl get service --namespace=devops-demo | grep -q flask-nodeport
            then
              ~/workspace/kubectl expose deployment flask \
                --type=NodePort \
                --name=flask-nodeport \
                --namespace=devops-demo
            fi
      - run:
          name: Expose LoadBalancer
          command: |
            if ! ~/workspace/kubectl get service --namespace=devops-demo | grep -q flask-loadbalancer
            then
              ~/workspace/kubectl expose deployment flask \
                --type=LoadBalancer \
                --name=flask-loadbalancer \
                --namespace=devops-demo
            fi
workflows:
  default:
    jobs:
      - upsert-security
      - upsert-network
      - upsert-cluster:
          requires: [upsert-network]
      - upsert-container-registry
      - test-backend
      - lint-backend
      - lint-docker
      - bump-backend-container-version:
          requires: [upsert-container-registry, test-backend, lint-backend, lint-docker]
      - upsert-nodes:
          requires: [upsert-cluster]
      - deploy-application:
          requires: [bump-backend-container-version, upsert-nodes]
